const jwt = require('jsonwebtoken');  // Th∆∞ vi·ªán jsonwebtoken

module.exports = {
  name: 'jwt-decoder-policy',  // T√™n policy
  // ƒê·ªãnh nghƒ©a schema (th√™m th√¥ng tin v·ªÅ c√°c tham s·ªë c·∫•u h√¨nh)
  schema: {
    $id: 'https://example.com/schemas/jwt-decoder-policy',  // ƒê·∫£m b·∫£o c√≥ $id ƒë·ªÉ Express Gateway c√≥ th·ªÉ x√°c th·ª±c
    type: 'object',
    properties: {
      secret: {
        type: 'string',
        description: 'Secret key d√πng ƒë·ªÉ verify JWT token',
        minLength: 1
      },
    },
    required: ['secret'],  // secret l√† tham s·ªë b·∫Øt bu·ªôc
  },
  policy: (actionParams) => {
    return (req, res, next) => {
      const token = req.headers['authorization']?.split(' ')[1];  // L·∫•y token t·ª´ header "Authorization"
      // console.log("üöÄ ~ return ~ token:", token)

      if (!token) {
        return res.status(401).json({ error: 'Token kh√¥ng t·ªìn t·∫°i trong header.' });  // Token kh√¥ng t·ªìn t·∫°i
      }

      // X√°c th·ª±c JWT v·ªõi secret key (ƒë·∫£m b·∫£o r·∫±ng b·∫°n c√≥ secret trong c·∫•u h√¨nh plugin)
      jwt.verify(token, actionParams.secret, (err, decoded) => {
        if (err) {
          return res.status(401).json({ error: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n.' });
        }
        
        // N·∫øu token h·ª£p l·ªá, l∆∞u th√¥ng tin decoded v√†o req.user
        console.log("üöÄ ~ return ~ decoded:", decoded)
        req.user = decoded;
      
        // Ti·∫øn h√†nh ti·∫øp theo
        next();
      });
    };
  }
};
