/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProvinceService } from "../province.service";
import { ProvinceCreateInput } from "./ProvinceCreateInput";
import { Province } from "./Province";
import { ProvinceFindManyArgs } from "./ProvinceFindManyArgs";
import { ProvinceWhereUniqueInput } from "./ProvinceWhereUniqueInput";
import { ProvinceUpdateInput } from "./ProvinceUpdateInput";
import { DistrictFindManyArgs } from "../../district/base/DistrictFindManyArgs";
import { District } from "../../district/base/District";
import { DistrictWhereUniqueInput } from "../../district/base/DistrictWhereUniqueInput";

export class ProvinceControllerBase {
  constructor(protected readonly service: ProvinceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Province })
  async createProvince(
    @common.Body() data: ProvinceCreateInput
  ): Promise<Province> {
    return await this.service.createProvince({
      data: {
        ...data,

        administrativeRegion: data.administrativeRegion
          ? {
              connect: data.administrativeRegion,
            }
          : undefined,

        administrativeUnit: data.administrativeUnit
          ? {
              connect: data.administrativeUnit,
            }
          : undefined,
      },
      select: {
        administrativeRegion: {
          select: {
            id: true,
          },
        },

        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Province] })
  @ApiNestedQuery(ProvinceFindManyArgs)
  async provinces(@common.Req() request: Request): Promise<Province[]> {
    const args = plainToClass(ProvinceFindManyArgs, request.query);
    return this.service.provinces({
      ...args,
      select: {
        administrativeRegion: {
          select: {
            id: true,
          },
        },

        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Province })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async province(
    @common.Param() params: ProvinceWhereUniqueInput
  ): Promise<Province | null> {
    const result = await this.service.province({
      where: params,
      select: {
        administrativeRegion: {
          select: {
            id: true,
          },
        },

        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Province })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProvince(
    @common.Param() params: ProvinceWhereUniqueInput,
    @common.Body() data: ProvinceUpdateInput
  ): Promise<Province | null> {
    try {
      return await this.service.updateProvince({
        where: params,
        data: {
          ...data,

          administrativeRegion: data.administrativeRegion
            ? {
                connect: data.administrativeRegion,
              }
            : undefined,

          administrativeUnit: data.administrativeUnit
            ? {
                connect: data.administrativeUnit,
              }
            : undefined,
        },
        select: {
          administrativeRegion: {
            select: {
              id: true,
            },
          },

          administrativeUnit: {
            select: {
              id: true,
            },
          },

          code: true,
          codeName: true,
          fullName: true,
          fullNameEn: true,
          id: true,
          name: true,
          nameEn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Province })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProvince(
    @common.Param() params: ProvinceWhereUniqueInput
  ): Promise<Province | null> {
    try {
      return await this.service.deleteProvince({
        where: params,
        select: {
          administrativeRegion: {
            select: {
              id: true,
            },
          },

          administrativeUnit: {
            select: {
              id: true,
            },
          },

          code: true,
          codeName: true,
          fullName: true,
          fullNameEn: true,
          id: true,
          name: true,
          nameEn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/districts")
  @ApiNestedQuery(DistrictFindManyArgs)
  async findDistricts(
    @common.Req() request: Request,
    @common.Param() params: ProvinceWhereUniqueInput
  ): Promise<District[]> {
    const query = plainToClass(DistrictFindManyArgs, request.query);
    const results = await this.service.findDistricts(params.id, {
      ...query,
      select: {
        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/districts")
  async connectDistricts(
    @common.Param() params: ProvinceWhereUniqueInput,
    @common.Body() body: DistrictWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      districts: {
        connect: body,
      },
    };
    await this.service.updateProvince({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/districts")
  async updateDistricts(
    @common.Param() params: ProvinceWhereUniqueInput,
    @common.Body() body: DistrictWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      districts: {
        set: body,
      },
    };
    await this.service.updateProvince({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/districts")
  async disconnectDistricts(
    @common.Param() params: ProvinceWhereUniqueInput,
    @common.Body() body: DistrictWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      districts: {
        disconnect: body,
      },
    };
    await this.service.updateProvince({
      where: params,
      data,
      select: { id: true },
    });
  }
}
