/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Province as PrismaProvince,
  District as PrismaDistrict,
  AdministrativeRegion as PrismaAdministrativeRegion,
  AdministrativeUnit as PrismaAdministrativeUnit,
} from "@prisma/client";

export class ProvinceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProvinceCountArgs, "select">): Promise<number> {
    return this.prisma.province.count(args);
  }

  async provinces(
    args: Prisma.ProvinceFindManyArgs
  ): Promise<PrismaProvince[]> {
    return this.prisma.province.findMany(args);
  }
  async province(
    args: Prisma.ProvinceFindUniqueArgs
  ): Promise<PrismaProvince | null> {
    return this.prisma.province.findUnique(args);
  }
  async createProvince(
    args: Prisma.ProvinceCreateArgs
  ): Promise<PrismaProvince> {
    return this.prisma.province.create(args);
  }
  async updateProvince(
    args: Prisma.ProvinceUpdateArgs
  ): Promise<PrismaProvince> {
    return this.prisma.province.update(args);
  }
  async deleteProvince(
    args: Prisma.ProvinceDeleteArgs
  ): Promise<PrismaProvince> {
    return this.prisma.province.delete(args);
  }

  async findDistricts(
    parentId: string,
    args: Prisma.DistrictFindManyArgs
  ): Promise<PrismaDistrict[]> {
    return this.prisma.province
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .districts(args);
  }

  async getAdministrativeRegion(
    parentId: string
  ): Promise<PrismaAdministrativeRegion | null> {
    return this.prisma.province
      .findUnique({
        where: { id: parentId },
      })
      .administrativeRegion();
  }

  async getAdministrativeUnit(
    parentId: string
  ): Promise<PrismaAdministrativeUnit | null> {
    return this.prisma.province
      .findUnique({
        where: { id: parentId },
      })
      .administrativeUnit();
  }
}
