/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DistrictService } from "../district.service";
import { DistrictCreateInput } from "./DistrictCreateInput";
import { District } from "./District";
import { DistrictFindManyArgs } from "./DistrictFindManyArgs";
import { DistrictWhereUniqueInput } from "./DistrictWhereUniqueInput";
import { DistrictUpdateInput } from "./DistrictUpdateInput";
import { WardFindManyArgs } from "../../ward/base/WardFindManyArgs";
import { Ward } from "../../ward/base/Ward";
import { WardWhereUniqueInput } from "../../ward/base/WardWhereUniqueInput";

export class DistrictControllerBase {
  constructor(protected readonly service: DistrictService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: District })
  async createDistrict(
    @common.Body() data: DistrictCreateInput
  ): Promise<District> {
    return await this.service.createDistrict({
      data: {
        ...data,

        administrativeUnit: data.administrativeUnit
          ? {
              connect: data.administrativeUnit,
            }
          : undefined,

        province: data.province
          ? {
              connect: data.province,
            }
          : undefined,
      },
      select: {
        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [District] })
  @ApiNestedQuery(DistrictFindManyArgs)
  async districts(@common.Req() request: Request): Promise<District[]> {
    const args = plainToClass(DistrictFindManyArgs, request.query);
    return this.service.districts({
      ...args,
      select: {
        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: District })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async district(
    @common.Param() params: DistrictWhereUniqueInput
  ): Promise<District | null> {
    const result = await this.service.district({
      where: params,
      select: {
        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,

        province: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: District })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDistrict(
    @common.Param() params: DistrictWhereUniqueInput,
    @common.Body() data: DistrictUpdateInput
  ): Promise<District | null> {
    try {
      return await this.service.updateDistrict({
        where: params,
        data: {
          ...data,

          administrativeUnit: data.administrativeUnit
            ? {
                connect: data.administrativeUnit,
              }
            : undefined,

          province: data.province
            ? {
                connect: data.province,
              }
            : undefined,
        },
        select: {
          administrativeUnit: {
            select: {
              id: true,
            },
          },

          code: true,
          codeName: true,
          fullName: true,
          fullNameEn: true,
          id: true,
          name: true,
          nameEn: true,

          province: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: District })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDistrict(
    @common.Param() params: DistrictWhereUniqueInput
  ): Promise<District | null> {
    try {
      return await this.service.deleteDistrict({
        where: params,
        select: {
          administrativeUnit: {
            select: {
              id: true,
            },
          },

          code: true,
          codeName: true,
          fullName: true,
          fullNameEn: true,
          id: true,
          name: true,
          nameEn: true,

          province: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/wards")
  @ApiNestedQuery(WardFindManyArgs)
  async findWards(
    @common.Req() request: Request,
    @common.Param() params: DistrictWhereUniqueInput
  ): Promise<Ward[]> {
    const query = plainToClass(WardFindManyArgs, request.query);
    const results = await this.service.findWards(params.id, {
      ...query,
      select: {
        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,

        district: {
          select: {
            id: true,
          },
        },

        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wards")
  async connectWards(
    @common.Param() params: DistrictWhereUniqueInput,
    @common.Body() body: WardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wards: {
        connect: body,
      },
    };
    await this.service.updateDistrict({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wards")
  async updateWards(
    @common.Param() params: DistrictWhereUniqueInput,
    @common.Body() body: WardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wards: {
        set: body,
      },
    };
    await this.service.updateDistrict({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wards")
  async disconnectWards(
    @common.Param() params: DistrictWhereUniqueInput,
    @common.Body() body: WardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wards: {
        disconnect: body,
      },
    };
    await this.service.updateDistrict({
      where: params,
      data,
      select: { id: true },
    });
  }
}
