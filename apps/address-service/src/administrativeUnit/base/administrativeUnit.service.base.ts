/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AdministrativeUnit as PrismaAdministrativeUnit,
  District as PrismaDistrict,
  Province as PrismaProvince,
  Ward as PrismaWard,
} from "@prisma/client";

export class AdministrativeUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdministrativeUnitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.administrativeUnit.count(args);
  }

  async administrativeUnits(
    args: Prisma.AdministrativeUnitFindManyArgs
  ): Promise<PrismaAdministrativeUnit[]> {
    return this.prisma.administrativeUnit.findMany(args);
  }
  async administrativeUnit(
    args: Prisma.AdministrativeUnitFindUniqueArgs
  ): Promise<PrismaAdministrativeUnit | null> {
    return this.prisma.administrativeUnit.findUnique(args);
  }
  async createAdministrativeUnit(
    args: Prisma.AdministrativeUnitCreateArgs
  ): Promise<PrismaAdministrativeUnit> {
    return this.prisma.administrativeUnit.create(args);
  }
  async updateAdministrativeUnit(
    args: Prisma.AdministrativeUnitUpdateArgs
  ): Promise<PrismaAdministrativeUnit> {
    return this.prisma.administrativeUnit.update(args);
  }
  async deleteAdministrativeUnit(
    args: Prisma.AdministrativeUnitDeleteArgs
  ): Promise<PrismaAdministrativeUnit> {
    return this.prisma.administrativeUnit.delete(args);
  }

  async findDistricts(
    parentId: string,
    args: Prisma.DistrictFindManyArgs
  ): Promise<PrismaDistrict[]> {
    return this.prisma.administrativeUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .districts(args);
  }

  async findProvinces(
    parentId: string,
    args: Prisma.ProvinceFindManyArgs
  ): Promise<PrismaProvince[]> {
    return this.prisma.administrativeUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .provinces(args);
  }

  async findWards(
    parentId: string,
    args: Prisma.WardFindManyArgs
  ): Promise<PrismaWard[]> {
    return this.prisma.administrativeUnit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wards(args);
  }
}
