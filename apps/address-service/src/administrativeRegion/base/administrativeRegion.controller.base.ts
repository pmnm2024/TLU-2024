/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdministrativeRegionService } from "../administrativeRegion.service";
import { AdministrativeRegionCreateInput } from "./AdministrativeRegionCreateInput";
import { AdministrativeRegion } from "./AdministrativeRegion";
import { AdministrativeRegionFindManyArgs } from "./AdministrativeRegionFindManyArgs";
import { AdministrativeRegionWhereUniqueInput } from "./AdministrativeRegionWhereUniqueInput";
import { AdministrativeRegionUpdateInput } from "./AdministrativeRegionUpdateInput";
import { ProvinceFindManyArgs } from "../../province/base/ProvinceFindManyArgs";
import { Province } from "../../province/base/Province";
import { ProvinceWhereUniqueInput } from "../../province/base/ProvinceWhereUniqueInput";

export class AdministrativeRegionControllerBase {
  constructor(protected readonly service: AdministrativeRegionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdministrativeRegion })
  async createAdministrativeRegion(
    @common.Body() data: AdministrativeRegionCreateInput
  ): Promise<AdministrativeRegion> {
    return await this.service.createAdministrativeRegion({
      data: data,
      select: {
        codeName: true,
        codeNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdministrativeRegion] })
  @ApiNestedQuery(AdministrativeRegionFindManyArgs)
  async administrativeRegions(
    @common.Req() request: Request
  ): Promise<AdministrativeRegion[]> {
    const args = plainToClass(AdministrativeRegionFindManyArgs, request.query);
    return this.service.administrativeRegions({
      ...args,
      select: {
        codeName: true,
        codeNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdministrativeRegion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async administrativeRegion(
    @common.Param() params: AdministrativeRegionWhereUniqueInput
  ): Promise<AdministrativeRegion | null> {
    const result = await this.service.administrativeRegion({
      where: params,
      select: {
        codeName: true,
        codeNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdministrativeRegion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdministrativeRegion(
    @common.Param() params: AdministrativeRegionWhereUniqueInput,
    @common.Body() data: AdministrativeRegionUpdateInput
  ): Promise<AdministrativeRegion | null> {
    try {
      return await this.service.updateAdministrativeRegion({
        where: params,
        data: data,
        select: {
          codeName: true,
          codeNameEn: true,
          id: true,
          name: true,
          nameEn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdministrativeRegion })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdministrativeRegion(
    @common.Param() params: AdministrativeRegionWhereUniqueInput
  ): Promise<AdministrativeRegion | null> {
    try {
      return await this.service.deleteAdministrativeRegion({
        where: params,
        select: {
          codeName: true,
          codeNameEn: true,
          id: true,
          name: true,
          nameEn: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/provinces")
  @ApiNestedQuery(ProvinceFindManyArgs)
  async findProvinces(
    @common.Req() request: Request,
    @common.Param() params: AdministrativeRegionWhereUniqueInput
  ): Promise<Province[]> {
    const query = plainToClass(ProvinceFindManyArgs, request.query);
    const results = await this.service.findProvinces(params.id, {
      ...query,
      select: {
        administrativeRegion: {
          select: {
            id: true,
          },
        },

        administrativeUnit: {
          select: {
            id: true,
          },
        },

        code: true,
        codeName: true,
        fullName: true,
        fullNameEn: true,
        id: true,
        name: true,
        nameEn: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/provinces")
  async connectProvinces(
    @common.Param() params: AdministrativeRegionWhereUniqueInput,
    @common.Body() body: ProvinceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      provinces: {
        connect: body,
      },
    };
    await this.service.updateAdministrativeRegion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/provinces")
  async updateProvinces(
    @common.Param() params: AdministrativeRegionWhereUniqueInput,
    @common.Body() body: ProvinceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      provinces: {
        set: body,
      },
    };
    await this.service.updateAdministrativeRegion({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/provinces")
  async disconnectProvinces(
    @common.Param() params: AdministrativeRegionWhereUniqueInput,
    @common.Body() body: ProvinceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      provinces: {
        disconnect: body,
      },
    };
    await this.service.updateAdministrativeRegion({
      where: params,
      data,
      select: { id: true },
    });
  }
}
