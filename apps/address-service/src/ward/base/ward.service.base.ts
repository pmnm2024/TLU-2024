/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Ward as PrismaWard,
  AdministrativeUnit as PrismaAdministrativeUnit,
  District as PrismaDistrict,
} from "@prisma/client";

export class WardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WardCountArgs, "select">): Promise<number> {
    return this.prisma.ward.count(args);
  }

  async wards(args: Prisma.WardFindManyArgs): Promise<PrismaWard[]> {
    return this.prisma.ward.findMany(args);
  }
  async ward(args: Prisma.WardFindUniqueArgs): Promise<PrismaWard | null> {
    return this.prisma.ward.findUnique(args);
  }
  async createWard(args: Prisma.WardCreateArgs): Promise<PrismaWard> {
    return this.prisma.ward.create(args);
  }
  async updateWard(args: Prisma.WardUpdateArgs): Promise<PrismaWard> {
    return this.prisma.ward.update(args);
  }
  async deleteWard(args: Prisma.WardDeleteArgs): Promise<PrismaWard> {
    return this.prisma.ward.delete(args);
  }

  async getAdministrativeUnit(
    parentId: string
  ): Promise<PrismaAdministrativeUnit | null> {
    return this.prisma.ward
      .findUnique({
        where: { id: parentId },
      })
      .administrativeUnit();
  }

  async getDistrict(parentId: string): Promise<PrismaDistrict | null> {
    return this.prisma.ward
      .findUnique({
        where: { id: parentId },
      })
      .district();
  }
}
