version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "${RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}"     # RabbitMQ AMQP port
      - "${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}"         # RabbitMQ Management UI
    restart: always
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"  # Redis Port
    volumes:
      - redis-data:/data
    networks:
      - app-network

  apigateway:
    build:
      context: ../api-gateway/my-gateway
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    volumes:
      - ../api-gateway/my-gateway:/app
    environment:
      - NODE_ENV=production
    networks:
      - app-network
  # postgres:
  #   image: postgres:13
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   ports:
  #     - "${POSTGRES_PORT}:${POSTGRES_PORT}"
  #   restart: always
  #   networks:
  #     - app-network
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "kong"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # kong:
  #   build: ./kong-token-to-header-extractor  # Chỉ định đường dẫn đến Dockerfile để xây dựng plugin
  #   container_name: kong
  #   depends_on:
  #     - postgres
  #   environment:
  #     KONG_DATABASE: "postgres"
  #     KONG_PG_HOST: postgres
  #     KONG_PG_USER: ${POSTGRES_USER}
  #     KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
  #     KONG_PROXY_ACCESS_LOG: /dev/stdout
  #     KONG_ADMIN_ACCESS_LOG: /dev/stdout
  #     KONG_PROXY_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_ERROR_LOG: /dev/stderr
  #     KONG_ADMIN_LISTEN: "0.0.0.0:${KONG_ADMIN_PORT}"
  #     KONG_PROXY_LISTEN: "0.0.0.0:${KONG_PROXY_PORT}"
  #     KONG_ADMIN_GUI_URL: http://localhost:8002
  #     KONG_PLUGINS: bundled,jwt-claims-to-headers
  #   ports:
  #     - "${KONG_PROXY_PORT}:${KONG_PROXY_PORT}"           # Kong Proxy Port
  #     - "${KONG_PROXY_PORT_SSL}:${KONG_PROXY_PORT_SSL}"   # Kong Proxy SSL Port
  #     - "${KONG_ADMIN_PORT}:${KONG_ADMIN_PORT}"           # Kong Admin Port
  #     - "${KONG_ADMIN_PORT_SSL}:${KONG_ADMIN_PORT_SSL}"   # Kong Admin SSL Port
  #     - "8002:8002"  # Cổng GUI của Kong Manager
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - app-network
  # oathkeeper:
  #   image: oryd/oathkeeper:latest
  #   environment:
  #     - OATHKEEPER_PROXY_PORT=4455  # Ory Oathkeeper Proxy Port
  #     - OATHKEEPER_API_PORT=4456    # Ory Oathkeeper API Port
  #   ports:
  #     - "4455:4455"  # Ory Oathkeeper Proxy
  #     - "4456:4456"  # Ory Oathkeeper API
  #   volumes:
  #     - ./oathkeeper.yml:/etc/oathkeeper/oathkeeper.yml  # Mount cấu hình Oathkeeper
  #   networks:
  #     - app-network
  #   depends_on:
  #     - kong
      
networks:
  app-network:
    external: true  # Sử dụng mạng Docker bên ngoài

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local