/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReliefItemService } from "../reliefItem.service";
import { ReliefItemCreateInput } from "./ReliefItemCreateInput";
import { ReliefItem } from "./ReliefItem";
import { ReliefItemFindManyArgs } from "./ReliefItemFindManyArgs";
import { ReliefItemWhereUniqueInput } from "./ReliefItemWhereUniqueInput";
import { ReliefItemUpdateInput } from "./ReliefItemUpdateInput";

export class ReliefItemControllerBase {
  constructor(protected readonly service: ReliefItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReliefItem })
  async createReliefItem(
    @common.Body() data: ReliefItemCreateInput
  ): Promise<ReliefItem> {
    return await this.service.createReliefItem({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        quantity: true,
        supportRequestTypeId: true,
        supportRequestTypeName: true,
        unit: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReliefItem] })
  @ApiNestedQuery(ReliefItemFindManyArgs)
  async reliefItems(@common.Req() request: Request): Promise<ReliefItem[]> {
    const args = plainToClass(ReliefItemFindManyArgs, request.query);
    return this.service.reliefItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        quantity: true,
        supportRequestTypeId: true,
        supportRequestTypeName: true,
        unit: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReliefItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reliefItem(
    @common.Param() params: ReliefItemWhereUniqueInput
  ): Promise<ReliefItem | null> {
    const result = await this.service.reliefItem({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        quantity: true,
        supportRequestTypeId: true,
        supportRequestTypeName: true,
        unit: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReliefItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReliefItem(
    @common.Param() params: ReliefItemWhereUniqueInput,
    @common.Body() data: ReliefItemUpdateInput
  ): Promise<ReliefItem | null> {
    try {
      return await this.service.updateReliefItem({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          quantity: true,
          supportRequestTypeId: true,
          supportRequestTypeName: true,
          unit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReliefItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReliefItem(
    @common.Param() params: ReliefItemWhereUniqueInput
  ): Promise<ReliefItem | null> {
    try {
      return await this.service.deleteReliefItem({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          quantity: true,
          supportRequestTypeId: true,
          supportRequestTypeName: true,
          unit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
