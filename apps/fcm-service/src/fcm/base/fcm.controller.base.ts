/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FcmService } from "../fcm.service";
import { FcmCreateInput } from "./FcmCreateInput";
import { Fcm } from "./Fcm";
import { FcmFindManyArgs } from "./FcmFindManyArgs";
import { FcmWhereUniqueInput } from "./FcmWhereUniqueInput";
import { FcmUpdateInput } from "./FcmUpdateInput";

export class FcmControllerBase {
  constructor(protected readonly service: FcmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Fcm })
  async createFcm(@common.Body() data: FcmCreateInput): Promise<Fcm> {
    return await this.service.createFcm({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        read: true,
        title: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Fcm] })
  @ApiNestedQuery(FcmFindManyArgs)
  async fcms(@common.Req() request: Request): Promise<Fcm[]> {
    const args = plainToClass(FcmFindManyArgs, request.query);
    return this.service.fcms({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        read: true,
        title: true,
        updatedAt: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Fcm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fcm(@common.Param() params: FcmWhereUniqueInput): Promise<Fcm | null> {
    const result = await this.service.fcm({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        read: true,
        title: true,
        updatedAt: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Fcm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFcm(
    @common.Param() params: FcmWhereUniqueInput,
    @common.Body() data: FcmUpdateInput
  ): Promise<Fcm | null> {
    try {
      return await this.service.updateFcm({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          read: true,
          title: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Fcm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFcm(
    @common.Param() params: FcmWhereUniqueInput
  ): Promise<Fcm | null> {
    try {
      return await this.service.deleteFcm({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          read: true,
          title: true,
          updatedAt: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
